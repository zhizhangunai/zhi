"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const intl_messageformat_parser_1 = require("intl-messageformat-parser");
class PlaceholderEnforcement extends Error {
    constructor(message) {
        super();
        this.message = message;
    }
}
function keyExistsInExpression(key, values) {
    if (!values) {
        return false;
    }
    if (values.type !== 'ObjectExpression') {
        return true; // True bc we cannot evaluate this
    }
    return !!values.properties.find(prop => {
        switch (prop.key.type) {
            case 'Identifier':
                return prop.key.name === key;
            case 'Literal':
                return prop.key.value === key;
        }
        return false;
    });
}
function verifyAst(ast, values) {
    for (const el of ast) {
        if (intl_messageformat_parser_1.isLiteralElement(el)) {
            continue;
        }
        if (!keyExistsInExpression(el.value, values)) {
            throw new PlaceholderEnforcement(`Missing value for placeholder "${el.value}"`);
        }
        if (intl_messageformat_parser_1.isPluralElement(el) || intl_messageformat_parser_1.isSelectElement(el)) {
            for (const selector of Object.keys(el.options)) {
                verifyAst(el.options[selector].value, values);
            }
        }
    }
}
function checkNode(context, node, importedMacroVars) {
    const msgs = util_1.extractMessages(node, importedMacroVars);
    for (const [{ message: { defaultMessage }, messageNode, }, values,] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        try {
            verifyAst(intl_messageformat_parser_1.parse(defaultMessage), values);
        }
        catch (e) {
            context.report({
                node: messageNode,
                message: e.message,
            });
        }
    }
}
const rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Enforce that all messages with placeholders have enough passed-in values',
            category: 'Errors',
            recommended: true,
            url: 'https://github.com/formatjs/formatjs/tree/master/packages/eslint-plugin-formatjs#enforce-placeholders',
        },
        fixable: 'code',
    },
    create(context) {
        let importedMacroVars = [];
        return {
            ImportDeclaration: node => {
                const moduleName = node.source.value;
                if (moduleName === '@formatjs/macro' || moduleName === 'react-intl') {
                    importedMacroVars = context.getDeclaredVariables(node);
                }
            },
            JSXOpeningElement: (node) => checkNode(context, node, importedMacroVars),
            CallExpression: node => checkNode(context, node, importedMacroVars),
        };
    },
};
exports.default = rule;
//# sourceMappingURL=enforce-placeholders.js.map