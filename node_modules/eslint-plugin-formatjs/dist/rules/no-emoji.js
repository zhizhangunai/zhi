"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const emojiRegex = require("emoji-regex");
const EMOJI_REGEX = emojiRegex();
function checkNode(context, node, importedMacroVars) {
    const msgs = util_1.extractMessages(node, importedMacroVars);
    for (const [{ message: { defaultMessage }, messageNode, },] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        if (EMOJI_REGEX.test(defaultMessage)) {
            context.report({
                node: messageNode,
                message: 'Emojis are not allowed',
            });
        }
    }
}
const rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow emojis in message',
            category: 'Errors',
            recommended: false,
            url: 'https://github.com/formatjs/formatjs/tree/master/packages/eslint-plugin-formatjs#no-emoji',
        },
        fixable: 'code',
    },
    create(context) {
        let importedMacroVars = [];
        return {
            ImportDeclaration: node => {
                const moduleName = node.source.value;
                if (moduleName === '@formatjs/macro' || moduleName === 'react-intl') {
                    importedMacroVars = context.getDeclaredVariables(node);
                }
            },
            JSXOpeningElement: (node) => checkNode(context, node, importedMacroVars),
            CallExpression: node => checkNode(context, node, importedMacroVars),
        };
    },
};
exports.default = rule;
//# sourceMappingURL=no-emoji.js.map