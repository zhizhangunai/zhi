"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const intl_messageformat_parser_1 = require("intl-messageformat-parser");
class PluralRulesEnforcement extends Error {
    constructor(message) {
        super();
        this.message = message;
    }
}
var LDML;
(function (LDML) {
    LDML["zero"] = "zero";
    LDML["one"] = "one";
    LDML["two"] = "two";
    LDML["few"] = "few";
    LDML["many"] = "many";
    LDML["other"] = "other";
})(LDML || (LDML = {}));
function verifyAst(plConfig, ast) {
    for (const el of ast) {
        if (intl_messageformat_parser_1.isPluralElement(el)) {
            const rules = Object.keys(plConfig);
            for (const rule of rules) {
                if (plConfig[rule] && !el.options[rule]) {
                    throw new PluralRulesEnforcement(`Missing plural rule "${rule}"`);
                }
                if (!plConfig[rule] && el.options[rule]) {
                    throw new PluralRulesEnforcement(`Plural rule "${rule}" is forbidden`);
                }
            }
            const { options } = el;
            for (const selector of Object.keys(options)) {
                verifyAst(plConfig, options[selector].value);
            }
        }
    }
}
function checkNode(context, node, importedMacroVars) {
    const msgs = util_1.extractMessages(node, importedMacroVars);
    if (!msgs.length) {
        return;
    }
    const plConfig = context.options[0];
    if (!plConfig) {
        return;
    }
    for (const [{ message: { defaultMessage }, messageNode, },] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        try {
            verifyAst(context.options[0], intl_messageformat_parser_1.parse(defaultMessage));
        }
        catch (e) {
            context.report({
                node: messageNode,
                message: e.message,
            });
        }
    }
}
const rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Enforce plural rules to always specify certain categories like `one`/`other`',
            category: 'Errors',
            recommended: false,
            url: 'https://github.com/formatjs/formatjs/tree/master/packages/eslint-plugin-formatjs#enforce-plural-rules',
        },
        fixable: 'code',
        schema: [
            {
                type: 'object',
                properties: Object.keys(LDML).reduce((schema, k) => {
                    schema[k] = {
                        type: 'boolean',
                    };
                    return schema;
                }, {}),
                additionalProperties: false,
            },
        ],
    },
    create(context) {
        let importedMacroVars = [];
        return {
            ImportDeclaration: node => {
                const moduleName = node.source.value;
                if (moduleName === '@formatjs/macro' || moduleName === 'react-intl') {
                    importedMacroVars = context.getDeclaredVariables(node);
                }
            },
            JSXOpeningElement: (node) => checkNode(context, node, importedMacroVars),
            CallExpression: node => checkNode(context, node, importedMacroVars),
        };
    },
};
exports.default = rule;
//# sourceMappingURL=enforce-plural-rules.js.map