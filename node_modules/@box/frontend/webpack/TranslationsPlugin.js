/**
 * Builds translations for a Box application in a standardized way
 * This plugin assumes the following project structure:
 *
 * projectRoot/
 *  i18n/
 *   json/
 *   bundles/
 *   *.properties
 *  src/
 *
 * Also, you must configure `babel-plugin-react-intl` the following way:
 * In your babelrc or babel.config.js:
 *   plugins: [
 *     ...
 *     "react-intl",
 *     {
 *       messagesDir: "./i18n/json",
 *     },
 *   ]
 */

const path = require('path');
const fs = require('fs');
const rimraf = require('rimraf');

const buildTranslations = require('../i18n/buildTranslations');
const buildLanguageBundles = require('../i18n/buildLanguageBundles');

class TranslationsPlugin {
    /**
     * @param options
     *    bundle: boolean
     *    libs: Array - Paths to node_module translation files (you can use [language] or [locale] placeholders)
     */
    constructor(options = {}) {
        this.projectRootDir = process.cwd();

        // Enforce 'i18n' folder is at project root
        this.i18nDir = path.join(this.projectRootDir, 'i18n');
        if (!fs.existsSync(this.i18nDir)) {
            throw new Error(
                `TranslationsPlugin Error: The application's 'i18n' directory does not exist. Please create one.`,
            );
        }

        this.jsonDir = path.join(this.i18nDir, 'json');
        this.bundlesDir = path.join(this.i18nDir, 'bundles');

        // Plugin Options
        const { generateBundles, additionalMessageData } = options;

        if (additionalMessageData && !Array.isArray(additionalMessageData)) {
            throw new Error('TranslationsPlugin Error: additionalMessageData params must be an array.');
        }

        this.generateBundles = !!generateBundles;
        this.additionalMessageData = additionalMessageData || [];
    }

    /**
     * Cleans up generated translation files
     */
    clean() {
        rimraf.sync(`${this.i18nDir}/*.js`); // Clean transformed .properties => .js files
        rimraf.sync(`${this.jsonDir}`); // Clean babel-plugin-react-intl translations to start clean
        rimraf.sync(`${this.bundlesDir}`);

        // This part of the plugin kind of breaks encapsulation but it fixes a common issue with translations not generating correctly
        // Clear babel-loader cache, if it exists, to fix the babel parsing of translation strings
        const babelLoaderCachePath = path.join(this.projectRootDir, 'node_modules', '.cache', 'babel-loader'); // Only catches default cache directory
        if (fs.existsSync(babelLoaderCachePath)) {
            // console.log(`TranslationsPlugin: Flushing babel-loader cache directory to ensure correct 'babel-plugin-react-intl' parsing`);
            rimraf.sync(babelLoaderCachePath);
        }
    }

    /**
     * Hook into webpack compiler
     */
    apply(compiler) {
        // Initial webpack Run
        compiler.hooks.afterEnvironment.tap('TranslationsPlugin', () => {
            // Dump previously generated files
            this.clean();
            // Build properties and JS files
            buildTranslations();
            // Build language bundles only once at the start of a webpack build
            if (this.generateBundles) {
                buildLanguageBundles(this.additionalMessageData);
            }
        });

        // Re-compile translation files and bundles as needed
        // @NOTE(jtan): We expect two "watchRun" passes when a message changes
        //   1. Rebuild en-US.properties and /i18n/*.js translation files
        //   2. Rebuild translation bundles and runtime
        compiler.hooks.done.tap('TranslationsPlugin', () => {
            buildTranslations();
        });
    }
}

module.exports = TranslationsPlugin;
