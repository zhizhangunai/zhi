/**
 * WatchDelayPlugin
 *
 * Due to the way watchpack (webpack's file system watcher) works, if a file is
 * generated within 1 second (FS_ACCURACY) of the original "watchRun" start time,
 * it counts as a file changed which triggers webpack to recompile again. To avoid this,
 * we are fudging the start time and then resetting it after we are done.
 */

const DEFAULT_DELAY_MS = 2000; // FS_ACCURACY is 1000 defined in watchpack

class WatchDelayPlugin {
    constructor(delay = DEFAULT_DELAY_MS) {
        this.delay = delay;
    }

    apply(compiler) {
        const originalWatch = compiler.watch.bind(compiler);
        let watching;

        compiler.watch = (...args) => {
            // Proxy to the original watch function, but grab a reference so we can monkey around with startTime
            watching = originalWatch(...args);
            watching.startTime += this.delay;
            return watching;
        };

        // All watch runs add a short delay
        compiler.hooks.watchRun.tap('WatchDelayPlugin', () => {
            if (watching) {
                watching.startTime += this.delay;
            }
        });

        // When the build is done, reset the delay time for accurate stats
        compiler.hooks.done.tap('WatchDelayPlugin', stats => {
            if (watching) {
                stats.startTime -= this.delay;
            }
        });
    }
}

module.exports = WatchDelayPlugin;
