/**
 * Builds language bundles for React applications.
 * It will bundle locale-data/{locale} and your application message data into a single file
 * Optionally, you can add more message data from other sources such as box-react-ui, etc.
 */

const path = require('path');
const fs = require('fs');
const languages = require('@box/languages');

// @TODO(jtan): Could probably use a better generator than a template string
const generateBundle = (language, locale, messageDataPaths) => `/**
 * Auto-generated Language Bundle File for ${language}
 * @IMPORTANT: DO NOT MODIFY THIS FILE DIRECTLY
 */

import '@formatjs/intl-pluralrules/dist/locale-data/${locale}';
import '@formatjs/intl-relativetimeformat/dist/locale-data/${locale}';
${messageDataPaths.map((libPath, index) => `import messageData${index} from '${libPath}';`).join('\n')}
import appMessageData from '../${language}';

const language = '${language}';
const locale = '${locale}';

const messages = {
    ${messageDataPaths.map((libPath, index) => `...messageData${index},`).join('\n    ')}
    ...appMessageData,
};

export { language, locale, messages };
`;

/**
 * Populates the paths with language/locale
 */
const getCompiledPaths = (language, locale, rawPaths) =>
    rawPaths.map(rawPath => rawPath.replace('[language]', language).replace('[locale]', locale));

/**
 * Example additionalMessageData:
 * [
 *   'box-react-ui/i18n/[language]',
 *   'box-ui-elements/i18n/[language]',
 * ]
 */
const buildLanguageBundles = (additionalMessageData = []) => {
    const projectRootDir = process.cwd();
    const i18nDir = path.join(projectRootDir, 'i18n');
    const bundlesDir = path.join(i18nDir, 'bundles');

    if (!fs.existsSync(i18nDir)) {
        throw new Error(`buildLanguageBundles Error: The "${i18nDir}" directory does not exist.`);
    }
    if (!Array.isArray(additionalMessageData)) {
        throw new Error(`buildLanguageBundles Error: 'additionalMessageData' parameter should be an array.`);
    }

    // Create bundle folder, if missing
    if (!fs.existsSync(bundlesDir)) {
        fs.mkdirSync(bundlesDir);
    }

    // Iterate through all supported languages and build corresponding bundles
    languages.forEach(language => {
        const locale = language.substr(0, language.indexOf('-'));
        const additionalMessageDataPaths = getCompiledPaths(language, locale, additionalMessageData);

        // @TODO(jtan): Might be nice to have sanity checks on additional message data paths, but resolving the file location is tricky
        // Do a sanity check that the translation file for this language is present in the application
        const appMessageDataFile = path.join(i18nDir, `${language}.js`);
        if (!fs.existsSync(appMessageDataFile)) {
            /* eslint-disable no-console */
            console.log(
                `Translation Bundling Error: "${appMessageDataFile}" does not exist. Skipping ${language} bundle`,
            );
            return;
        }

        // Validate that all non application-specific message data paths exists
        additionalMessageDataPaths.forEach(additionalMessageDataPath => {
            // We only resolve "src/" and "node_modules/" here. Custom webpack resolvers and aliases are not supported.
            const srcPath = path.join(projectRootDir, 'src', `${additionalMessageDataPath}.js`);
            const nodeModulesPath = path.join(projectRootDir, 'node_modules', `${additionalMessageDataPath}.js`);
            if (!fs.existsSync(srcPath) && !fs.existsSync(nodeModulesPath)) {
                throw new Error(
                    `Translation Bundling Error: "${additionalMessageDataPath}" does not exist. Please ensure your dependencies have the required language support.`,
                );
            }
        });

        const languageBundlePath = path.join(bundlesDir, `${language}.js`);
        const contents = generateBundle(language, locale, additionalMessageDataPaths);
        fs.writeFileSync(languageBundlePath, contents);
    });
};

module.exports = buildLanguageBundles;
