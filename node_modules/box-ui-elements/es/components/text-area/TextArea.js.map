{"version":3,"sources":["../../../src/components/text-area/TextArea.js"],"names":["React","classNames","uniqueId","Label","Tooltip","TextArea","className","description","error","errorTooltipPosition","hideLabel","hideOptionalLabel","isRequired","isResizable","label","textareaRef","tooltipTetherClassName","rest","hasError","classes","errorMessageID","useRef","current","descriptionID","ariaAttrs","undefined","resize","displayName"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,iBAAP;;AAuBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAaJ;AAAA,4BAZTC,SAYS;AAAA,MAZTA,SAYS,+BAZG,EAYH;AAAA,MAXTC,WAWS,QAXTA,WAWS;AAAA,MAVTC,KAUS,QAVTA,KAUS;AAAA,MATTC,oBASS,QATTA,oBASS;AAAA,MARTC,SAQS,QARTA,SAQS;AAAA,MAPTC,iBAOS,QAPTA,iBAOS;AAAA,MANTC,UAMS,QANTA,UAMS;AAAA,MALTC,WAKS,QALTA,WAKS;AAAA,MAJTC,KAIS,QAJTA,KAIS;AAAA,MAHTC,WAGS,QAHTA,WAGS;AAAA,MAFTC,sBAES,QAFTA,sBAES;AAAA,MADNC,IACM;;AACT,MAAMC,QAAQ,GAAG,CAAC,CAACV,KAAnB;AACA,MAAMW,OAAO,GAAGlB,UAAU,CAACK,SAAD,EAAY,qBAAZ,EAAmC;AACzD,kBAAcY;AAD2C,GAAnC,CAA1B;AAIA,MAAME,cAAc,GAAGpB,KAAK,CAACqB,MAAN,CAAanB,QAAQ,CAAC,cAAD,CAArB,EAAuCoB,OAA9D;AACA,MAAMC,aAAa,GAAGvB,KAAK,CAACqB,MAAN,CAAanB,QAAQ,CAAC,aAAD,CAArB,EAAsCoB,OAA5D;AAEA,MAAME,SAAS,GAAG;AACd,oBAAgBN,QADF;AAEd,qBAAiBN,UAFH;AAGd,yBAAqBQ,cAHP;AAId,wBAAoBb,WAAW,GAAGgB,aAAH,GAAmBE;AAJpC,GAAlB;AAOA,SACI;AAAK,IAAA,SAAS,EAAEN;AAAhB,KACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAET,SAAlB;AAA6B,IAAA,gBAAgB,EAAE,CAACC,iBAAD,IAAsB,CAACC,UAAtE;AAAkF,IAAA,IAAI,EAAEE;AAAxF,KACK,CAAC,CAACP,WAAF,IACG;AAAK,IAAA,EAAE,EAAEgB,aAAT;AAAwB,IAAA,SAAS,EAAC;AAAlC,KACKhB,WADL,CAFR,EAMI,oBAAC,OAAD;AACI,IAAA,OAAO,EAAEW,QADb;AAEI,IAAA,QAAQ,EAAET,oBAAoB,IAAI,aAFtC;AAGI,IAAA,sBAAsB,EAAEO,sBAH5B;AAII,IAAA,IAAI,EAAER,KAAK,IAAI,EAJnB;AAKI,IAAA,KAAK,EAAC;AALV,KAOI;AACI,IAAA,GAAG,EAAEO,WADT;AAEI,IAAA,QAAQ,EAAEH,UAFd;AAGI,IAAA,KAAK,EAAE;AAAEc,MAAAA,MAAM,EAAEb,WAAW,GAAG,EAAH,GAAQ;AAA7B;AAHX,KAIQW,SAJR,EAKQP,IALR,EAPJ,CANJ,EAqBI;AAAM,IAAA,EAAE,EAAEG,cAAV;AAA0B,IAAA,SAAS,EAAC,sBAApC;AAA2D,IAAA,IAAI,EAAC;AAAhE,KACKZ,KADL,CArBJ,CADJ,CADJ;AA6BH,CA1DD;;AA4DAH,QAAQ,CAACsB,WAAT,GAAuB,UAAvB;AAGA,eAAetB,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport Label from '../label';\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\n\nimport './TextArea.scss';\n\ntype Props = {\n    className?: string,\n    description?: React.Node,\n    error?: React.Node,\n    /** Renders error tooltip at the specified position (positions are those from Tooltip) */\n    errorTooltipPosition?: Position,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    /** Makes the text area value required */\n    isRequired?: boolean,\n    /** Is text area resizable */\n    isResizable?: boolean,\n    /** Label displayed for the text area */\n    label: React.Node,\n    textareaRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n    /** A CSS class for the tooltip's tether element component */\n    tooltipTetherClassName?: string,\n};\n\nconst TextArea = ({\n    className = '',\n    description,\n    error,\n    errorTooltipPosition,\n    hideLabel,\n    hideOptionalLabel,\n    isRequired,\n    isResizable,\n    label,\n    textareaRef,\n    tooltipTetherClassName,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-area-container', {\n        'show-error': hasError,\n    });\n\n    const errorMessageID = React.useRef(uniqueId('errorMessage')).current;\n    const descriptionID = React.useRef(uniqueId('description')).current;\n\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-errormessage': errorMessageID,\n        'aria-describedby': description ? descriptionID : undefined,\n    };\n\n    return (\n        <div className={classes}>\n            <Label hideLabel={hideLabel} showOptionalText={!hideOptionalLabel && !isRequired} text={label}>\n                {!!description && (\n                    <div id={descriptionID} className=\"text-area-description\">\n                        {description}\n                    </div>\n                )}\n                <Tooltip\n                    isShown={hasError}\n                    position={errorTooltipPosition || 'bottom-left'}\n                    tetherElementClassName={tooltipTetherClassName}\n                    text={error || ''}\n                    theme=\"error\"\n                >\n                    <textarea\n                        ref={textareaRef}\n                        required={isRequired}\n                        style={{ resize: isResizable ? '' : 'none' }}\n                        {...ariaAttrs}\n                        {...rest}\n                    />\n                </Tooltip>\n                <span id={errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                    {error}\n                </span>\n            </Label>\n        </div>\n    );\n};\n\nTextArea.displayName = 'TextArea';\n\nexport type TextAreaProps = Props;\nexport default TextArea;\n"],"file":"TextArea.js"}