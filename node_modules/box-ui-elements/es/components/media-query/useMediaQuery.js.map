{"version":3,"sources":["../../../src/components/media-query/useMediaQuery.js"],"names":["toQuery","useMediaQuery","_useMediaQuery","ANY_HOVER","ANY_POINTER_COARSE","ANY_POINTER_FINE","HOVER","HOVER_TYPE","POINTER_COARSE","POINTER_FINE","POINTER_TYPE","SIZE_LARGE","SIZE_MEDIUM","SIZE_SMALL","VIEW_SIZE_TYPE","getPointerCapabilities","isFine","isCoarse","none","fine","coarse","getViewDimensions","viewWidth","window","innerWidth","viewHeight","innerHeight","formatQuery","query","useQuery","onQueryChange","useDeviceCapabilities","isHover","isAnyHover","anyHover","hover","pointer","anyPointer","useDeviceSize","isSmall","isMedium","isLarge","small","medium","large","xlarge","deviceCapabilities","deviceSize","viewDimensions","size"],"mappings":"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","sourcesContent":["// @flow\n\nimport { toQuery, useMediaQuery as _useMediaQuery } from 'react-responsive';\nimport {\n    ANY_HOVER,\n    ANY_POINTER_COARSE,\n    ANY_POINTER_FINE,\n    HOVER,\n    HOVER_TYPE,\n    POINTER_COARSE,\n    POINTER_FINE,\n    POINTER_TYPE,\n    SIZE_LARGE,\n    SIZE_MEDIUM,\n    SIZE_SMALL,\n    VIEW_SIZE_TYPE,\n} from './constants';\nimport type { MediaQuery, MediaShape } from './types';\n\nconst getPointerCapabilities = (isFine: boolean, isCoarse: boolean) => {\n    if (!isFine && !isCoarse) return POINTER_TYPE.none;\n    if (isFine) return POINTER_TYPE.fine;\n    return POINTER_TYPE.coarse;\n};\n\nconst getViewDimensions = () => {\n    return { viewWidth: window.innerWidth, viewHeight: window.innerHeight };\n};\n\n/**\n * Formats the media query either as a MediaQuery object or string\n * @param query\n * @returns {string}\n */\nfunction formatQuery(query: MediaQuery): string {\n    return typeof query === 'string' ? query : toQuery(query);\n}\n\n/**\n * Executes media query\n * @param query\n * @param onQueryChange\n * @returns {boolean}\n */\nfunction useQuery(query: MediaQuery, onQueryChange?: (_: boolean) => void): boolean {\n    return _useMediaQuery({ query: formatQuery(query) }, null, onQueryChange);\n}\n\n/**\n * Determines device capabilities for hover and pointer features\n * @returns {{anyPointer: *, hover: (string), pointer: *, anyHover: (string)}}\n */\nfunction useDeviceCapabilities() {\n    const isHover: boolean = useQuery(HOVER);\n    const isAnyHover: boolean = useQuery(ANY_HOVER);\n\n    const anyHover = isAnyHover ? HOVER_TYPE.hover : HOVER_TYPE.none;\n    const hover = isHover ? HOVER_TYPE.hover : HOVER_TYPE.none;\n    const pointer = getPointerCapabilities(useQuery(POINTER_FINE), useQuery(POINTER_COARSE));\n    const anyPointer = getPointerCapabilities(useQuery(ANY_POINTER_FINE), useQuery(ANY_POINTER_COARSE));\n\n    return {\n        anyHover,\n        hover,\n        anyPointer,\n        pointer,\n    };\n}\n\n/**\n * Determines device size using media queries\n * @returns {string}\n */\nfunction useDeviceSize() {\n    const isSmall: boolean = useQuery(SIZE_SMALL);\n    const isMedium: boolean = useQuery(SIZE_MEDIUM);\n    const isLarge: boolean = useQuery(SIZE_LARGE);\n\n    if (isSmall) return VIEW_SIZE_TYPE.small;\n    if (isMedium) return VIEW_SIZE_TYPE.medium;\n    if (isLarge) return VIEW_SIZE_TYPE.large;\n\n    return VIEW_SIZE_TYPE.xlarge;\n}\n\nfunction useMediaQuery(): MediaShape {\n    const deviceCapabilities = useDeviceCapabilities();\n    const deviceSize = useDeviceSize();\n    const viewDimensions = getViewDimensions();\n    return {\n        ...deviceCapabilities,\n        ...viewDimensions,\n        size: deviceSize,\n    };\n}\n\nexport default useMediaQuery;\n"],"file":"useMediaQuery.js"}