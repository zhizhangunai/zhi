{"version":3,"sources":["../../../../src/components/media-query/stories/MediaQuery.stories.js"],"names":["React","VIEW_SIZE_TYPE","notes","useMediaQuery","withMediaQuery","CustomHook","hover","pointer","size","viewWidth","viewHeight","small","medium","large","xlarge","DemoComponent","props","HigherOrderComponent","title","component","parameters","viewport","defaultViewport"],"mappings":"AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,uBAC4BF,aAAa,EADzC;AAAA,MACpBG,KADoB,kBACpBA,KADoB;AAAA,MACbC,OADa,kBACbA,OADa;AAAA,MACJC,IADI,kBACJA,IADI;AAAA,MACEC,SADF,kBACEA,SADF;AAAA,MACaC,UADb,kBACaA,UADb;;AAG5B,SACI,iCACI,+BACI,wCADJ,EAEI,6CAAWJ,KAAX,EAFJ,CADJ,EAKI,+BACI,0CADJ,EAEI,6CAAWC,OAAX,EAFJ,CALJ,EASI,+BACI,kDADJ,EAEI,6CAAWE,SAAX,sBAAgCC,UAAhC,YAFJ,CATJ,EAaKF,IAAI,KAAKP,cAAc,CAACU,KAAxB,IAAiC,qDAbtC,EAcKH,IAAI,KAAKP,cAAc,CAACW,MAAxB,IAAkC,sDAdvC,EAeKJ,IAAI,KAAKP,cAAc,CAACY,KAAxB,IAAiC,qDAftC,EAgBKL,IAAI,KAAKP,cAAc,CAACa,MAAxB,IAAkC,sDAhBvC,CADJ;AAoBH,CAvBM;;AAkCP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAkB;AAAA,MAC5BV,KAD4B,GACoBU,KADpB,CAC5BV,KAD4B;AAAA,MACrBC,OADqB,GACoBS,KADpB,CACrBT,OADqB;AAAA,MACZC,IADY,GACoBQ,KADpB,CACZR,IADY;AAAA,MACNC,SADM,GACoBO,KADpB,CACNP,SADM;AAAA,MACKC,UADL,GACoBM,KADpB,CACKN,UADL;AAGpC,SACI,iCACI,+BACI,wCADJ,EAEI,6CAAWJ,KAAX,EAFJ,CADJ,EAKI,+BACI,0CADJ,EAEI,6CAAWC,OAAX,EAFJ,CALJ,EASI,+BACI,kDADJ,EAEI,6CAAWE,SAAX,sBAAgCC,UAAhC,YAFJ,CATJ,EAaKF,IAAI,KAAK,OAAT,IAAoB,qDAbzB,EAcKA,IAAI,KAAK,QAAT,IAAqB,sDAd1B,EAeKA,IAAI,KAAK,OAAT,IAAoB,qDAfzB,EAgBKA,IAAI,KAAK,SAAT,IAAsB,sDAhB3B,CADJ;AAoBH,CAvBD;;AAyBA,OAAO,IAAMS,oBAAoB,GAAGb,cAAc,CAACW,aAAD,CAA3C;AAEP,eAAe;AACXG,EAAAA,KAAK,EAAE,uBADI;AAEXC,EAAAA,SAAS,EAAEhB,aAFA;AAGXiB,EAAAA,UAAU,EAAE;AACRlB,IAAAA,KAAK,EAALA,KADQ;AAERmB,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AADX;AAFF;AAHD,CAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\n\nimport { VIEW_SIZE_TYPE } from '../constants';\nimport notes from './MediaQuery.stories.md';\nimport useMediaQuery from '../useMediaQuery';\nimport withMediaQuery from '../withMediaQuery';\n\nexport const CustomHook = () => {\n    const { hover, pointer, size, viewWidth, viewHeight } = useMediaQuery();\n\n    return (\n        <div>\n            <p>\n                <b>Hover:</b>\n                <span>{` ${hover}`}</span>\n            </p>\n            <p>\n                <b>Pointer:</b>\n                <span>{` ${pointer}`}</span>\n            </p>\n            <p>\n                <b>View Dimensions:</b>\n                <span>{` ${viewWidth}px (w) x ${viewHeight}px (h)`}</span>\n            </p>\n            {size === VIEW_SIZE_TYPE.small && <h4>This view is small</h4>}\n            {size === VIEW_SIZE_TYPE.medium && <h3>This view is medium</h3>}\n            {size === VIEW_SIZE_TYPE.large && <h2>This view is large</h2>}\n            {size === VIEW_SIZE_TYPE.xlarge && <h1>This view is xlarge</h1>}\n        </div>\n    );\n};\n\ntype Props = {\n    children?: any,\n    hover: string,\n    pointer: string,\n    size: string,\n    viewHeight: number,\n    viewWidth: number,\n};\n\nconst DemoComponent = (props: Props) => {\n    const { hover, pointer, size, viewWidth, viewHeight } = props;\n\n    return (\n        <div>\n            <p>\n                <b>Hover:</b>\n                <span>{` ${hover}`}</span>\n            </p>\n            <p>\n                <b>Pointer:</b>\n                <span>{` ${pointer}`}</span>\n            </p>\n            <p>\n                <b>View Dimensions:</b>\n                <span>{` ${viewWidth}px (w) x ${viewHeight}px (h)`}</span>\n            </p>\n            {size === 'small' && <h4>This view is small</h4>}\n            {size === 'medium' && <h3>This view is medium</h3>}\n            {size === 'large' && <h2>This view is large</h2>}\n            {size === 'x-large' && <h1>This view is xlarge</h1>}\n        </div>\n    );\n};\n\nexport const HigherOrderComponent = withMediaQuery(DemoComponent);\n\nexport default {\n    title: 'Components|MediaQuery',\n    component: useMediaQuery,\n    parameters: {\n        notes,\n        viewport: {\n            defaultViewport: 'tablet',\n        },\n    },\n};\n"],"file":"MediaQuery.stories.js"}