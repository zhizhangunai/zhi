{"version":3,"sources":["../../../src/components/button/Button.tsx"],"names":["React","classNames","omit","LoadingIndicator","RadarAnimation","ButtonType","Button","event","props","isDisabled","onClick","btnElement","classList","contains","preventDefault","stopPropagation","children","className","icon","isLoading","isSelected","setRef","size","type","showRadar","rest","buttonProps","styleClassName","button","element","handleClick","cloneElement","width","height","Component","SUBMIT"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport LoadingIndicator from '../loading-indicator';\nimport RadarAnimation from '../radar';\nimport { SVGProps } from '../accessible-svg/AccessibleSVG';\n\nexport enum ButtonType {\n    BUTTON = 'button',\n    RESET = 'reset',\n    SUBMIT = 'submit',\n}\nexport interface ButtonProps {\n    /** Child components for the button, generally localized text */\n    children?: React.ReactNode;\n    /** Custom class for the button */\n    className: string;\n    /** icon component, can be paired with children (text) or on its own */\n    icon?: React.ReactElement;\n    /** whether the button is disabled or not */\n    isDisabled?: boolean;\n    /** whether the button is loading or not */\n    isLoading: boolean;\n    /** whether the button is selected or not */\n    isSelected?: boolean;\n    /** onClick handler for the button */\n    onClick?: Function;\n    /** to set buttons inner ref */\n    setRef?: Function;\n    /** size of the button */\n    size?: 'large';\n    /** whether to show a radar */\n    showRadar: boolean;\n    /** type for the button */\n    type: ButtonType;\n}\n\nclass Button extends React.Component<ButtonProps> {\n    btnElement: HTMLButtonElement | null = null;\n\n    static defaultProps = {\n        className: '',\n        isLoading: false,\n        showRadar: false,\n        type: ButtonType.SUBMIT,\n    };\n\n    handleClick = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n        const { isDisabled, onClick } = this.props;\n        if (isDisabled || (this.btnElement && this.btnElement.classList.contains('is-disabled'))) {\n            event.preventDefault();\n            event.stopPropagation();\n            return;\n        }\n        if (onClick) {\n            onClick(event);\n        }\n    };\n\n    render() {\n        const {\n            children,\n            className,\n            icon,\n            isDisabled,\n            isLoading,\n            isSelected,\n            setRef,\n            size,\n            type,\n            showRadar,\n            ...rest\n        } = this.props;\n        const buttonProps: Record<string, boolean> = omit(rest, ['onClick']);\n        if (isDisabled) {\n            buttonProps['aria-disabled'] = true;\n        }\n\n        const styleClassName = classNames(\n            'btn',\n            {\n                'is-disabled': isDisabled,\n                'is-loading': isLoading,\n                'is-selected': isSelected,\n                'bdl-btn--large': size === 'large',\n                'bdl-has-icon': !!icon,\n            },\n            className,\n        );\n\n        let button = (\n            // eslint-disable-next-line react/button-has-type\n            <button\n                ref={element => {\n                    this.btnElement = element;\n                    if (setRef) {\n                        setRef(element);\n                    }\n                }}\n                className={styleClassName}\n                onClick={this.handleClick}\n                type={type}\n                {...buttonProps}\n            >\n                {children ? <span className=\"btn-content\">{children}</span> : null}\n                {icon ? (\n                    <span className=\"bdl-btn-icon\">\n                        {React.cloneElement<SVGProps>(icon, {\n                            width: icon && children ? 16 : 20,\n                            height: icon && children ? 16 : 20,\n                        })}\n                    </span>\n                ) : null}\n                {isLoading && <LoadingIndicator className=\"btn-loading-indicator\" />}\n            </button>\n        );\n        if (showRadar) {\n            button = <RadarAnimation>{button}</RadarAnimation>;\n        }\n\n        return button;\n    }\n}\n\nexport default Button;\n"],"file":"Button.js"}