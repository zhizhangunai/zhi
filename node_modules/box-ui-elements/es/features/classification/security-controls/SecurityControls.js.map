{"version":3,"sources":["../../../../src/features/classification/security-controls/SecurityControls.js"],"names":["React","FormattedMessage","DEFAULT_MAX_APP_COUNT","SECURITY_CONTROLS_FORMAT","getShortSecurityControlsMessage","getFullSecurityControlsMessages","messages","PlainButton","Label","SecurityControlsItem","SecurityControlsModal","FULL","SHORT","SHORT_WITH_BTN","SecurityControls","isSecurityControlsModalOpen","setState","props","classificationColor","classificationName","controls","controlsFormat","definition","itemName","maxAppCount","shouldRenderLabel","items","modalItems","length","state","shouldShowSecurityControlsModal","itemsList","map","index","message","tooltipMessage","securityControlsLabel","openModal","viewAll","closeModal","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { DEFAULT_MAX_APP_COUNT, SECURITY_CONTROLS_FORMAT } from '../constants';\nimport { getShortSecurityControlsMessage, getFullSecurityControlsMessages } from './utils';\nimport messages from './messages';\nimport PlainButton from '../../../components/plain-button';\nimport Label from '../../../components/label/Label';\nimport SecurityControlsItem from './SecurityControlsItem';\nimport SecurityControlsModal from './SecurityControlsModal';\nimport type { Controls, ControlsFormat } from '../flowTypes';\n\nimport './SecurityControls.scss';\n\nconst { FULL, SHORT, SHORT_WITH_BTN } = SECURITY_CONTROLS_FORMAT;\n\ntype Props = {\n    classificationColor?: string,\n    classificationName?: string,\n    controls: Controls,\n    controlsFormat: ControlsFormat,\n    definition?: string,\n    itemName?: string,\n    maxAppCount?: number,\n    shouldRenderLabel?: boolean,\n};\n\ntype State = {\n    isSecurityControlsModalOpen: boolean,\n};\n\nclass SecurityControls extends React.Component<Props, State> {\n    static defaultProps = {\n        classificationName: '',\n        definition: '',\n        itemName: '',\n        controls: {},\n        controlsFormat: SHORT,\n        maxAppCount: DEFAULT_MAX_APP_COUNT,\n        shouldRenderLabel: false,\n    };\n\n    state = {\n        isSecurityControlsModalOpen: false,\n    };\n\n    openModal = () => this.setState({ isSecurityControlsModalOpen: true });\n\n    closeModal = () => this.setState({ isSecurityControlsModalOpen: false });\n\n    render() {\n        const {\n            classificationColor,\n            classificationName,\n            controls,\n            controlsFormat,\n            definition,\n            itemName,\n            maxAppCount,\n            shouldRenderLabel,\n        } = this.props;\n\n        let items = [];\n        let modalItems;\n\n        if (controlsFormat === FULL) {\n            items = getFullSecurityControlsMessages(controls, maxAppCount);\n        } else {\n            items = getShortSecurityControlsMessage(controls);\n\n            if (items.length && controlsFormat === SHORT_WITH_BTN) {\n                modalItems = getFullSecurityControlsMessages(controls, maxAppCount);\n            }\n        }\n\n        if (!items.length) {\n            return null;\n        }\n\n        const { isSecurityControlsModalOpen } = this.state;\n        const shouldShowSecurityControlsModal =\n            controlsFormat === SHORT_WITH_BTN && !!itemName && !!classificationName && !!definition;\n\n        let itemsList = (\n            <ul className=\"bdl-SecurityControls\">\n                {items.map(({ message, tooltipMessage }, index) => (\n                    <SecurityControlsItem key={index} message={message} tooltipMessage={tooltipMessage} />\n                ))}\n            </ul>\n        );\n\n        if (shouldRenderLabel) {\n            itemsList = <Label text={<FormattedMessage {...messages.securityControlsLabel} />}>{itemsList}</Label>;\n        }\n\n        return (\n            <>\n                {itemsList}\n                {shouldShowSecurityControlsModal && (\n                    <>\n                        <PlainButton className=\"lnk\" onClick={this.openModal} type=\"button\">\n                            <FormattedMessage {...messages.viewAll} />\n                        </PlainButton>\n                        <SecurityControlsModal\n                            classificationColor={classificationColor}\n                            classificationName={classificationName}\n                            closeModal={this.closeModal}\n                            definition={definition}\n                            itemName={itemName}\n                            isSecurityControlsModalOpen={isSecurityControlsModalOpen}\n                            modalItems={modalItems}\n                        />\n                    </>\n                )}\n            </>\n        );\n    }\n}\n\nexport type { Props as SecurityControlsProps };\nexport default SecurityControls;\n"],"file":"SecurityControls.js"}