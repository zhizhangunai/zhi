{"version":3,"sources":["../../../../src/elements/common/logger/Logger.js"],"names":["React","noop","uuidv4","isMarkSupported","EVENT_DATA_READY","EVENT_JS_READY","METRIC_TYPE_PREVIEW","METRIC_TYPE_ELEMENTS_LOAD_METRIC","SESSION_ID","uniqueEvents","Set","Logger","props","data","onMetric","type","uniqueId","logUniqueMetric","startMarkName","metricData","loggerProps","onDataReadyMetric","handleDataReadyMetric","onPreviewMetric","handlePreviewMetric","onReadyMetric","handleReadyMetric","name","source","eventName","has","metric","component","timestamp","getTimestamp","sessionId","createEventName","hasLoggedEvent","logMetric","add","Date","toISOString","children","rest","cloneElement","logger","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport uuidv4 from 'uuid/v4';\nimport { isMarkSupported } from '../../../utils/performance';\nimport { EVENT_DATA_READY, EVENT_JS_READY } from './constants';\nimport { METRIC_TYPE_PREVIEW, METRIC_TYPE_ELEMENTS_LOAD_METRIC } from '../../../constants';\nimport type { ElementOrigin } from '../flowTypes';\nimport type { MetricType, ElementsLoadMetricData, LoggerProps } from '../../../common/types/logging';\n\ntype ElementsMetric = {\n    component: ElementOrigin,\n    name: string,\n    sessionId: string,\n    timestamp: string,\n    type: MetricType,\n} & ElementsLoadMetricData;\n\ntype Props = {\n    children: React.Element<any>,\n    fileId?: string,\n    onMetric: (data: Object) => void,\n    source: ElementOrigin,\n    startMarkName?: string,\n};\n\nconst SESSION_ID = uuidv4();\nconst uniqueEvents: Set<string> = new Set();\n\nclass Logger extends React.Component<Props> {\n    static defaultProps = {\n        onMetric: noop,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.loggerProps = {\n            onDataReadyMetric: this.handleDataReadyMetric,\n            onPreviewMetric: this.handlePreviewMetric,\n            onReadyMetric: this.handleReadyMetric,\n        };\n    }\n\n    loggerProps: LoggerProps;\n\n    get uniqueEvents(): Set<string> {\n        return uniqueEvents;\n    }\n\n    get sessionId(): string {\n        return SESSION_ID;\n    }\n\n    /**\n     * Creates an event name meant for use with an event which is unique and meant to be logged only once\n     *\n     * @param {string} name - The event name\n     * @param {string} [uniqueId] - an optional unique id\n     * @returns {string} A string containing the component and event name and optional unique id\n     */\n    createEventName(name: string, uniqueId?: string): string {\n        const { source } = this.props;\n        const eventName = `${source}::${name}`;\n        return uniqueId ? `${eventName}::${uniqueId}` : eventName;\n    }\n\n    /**\n     * Checks to see if the specified event for the component has already been fired.\n     *\n     * @param {string} component - the component name\n     * @param {string} name - the event name\n     * @returns {boolean} True if the event has already been fired\n     */\n    hasLoggedEvent(name: string): boolean {\n        return this.uniqueEvents.has(name);\n    }\n\n    /**\n     * Invokes the provided metric logging callback.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n    logMetric(type: MetricType, name: string, data: Object): void {\n        const { onMetric, source } = this.props;\n        const metric: ElementsMetric = {\n            ...data,\n            component: source,\n            name,\n            timestamp: this.getTimestamp(),\n            sessionId: this.sessionId,\n            type,\n        };\n\n        onMetric(metric);\n    }\n\n    /**\n     * Logs a unique metric event. Prevents duplicate events from being logged in the session.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     * @param {string} [uniqueId] - an optional unique id\n     * @returns {void}\n     */\n    logUniqueMetric(type: MetricType, name: string, data: Object, uniqueId?: string): void {\n        const eventName = this.createEventName(name, uniqueId);\n        if (this.hasLoggedEvent(eventName)) {\n            return;\n        }\n\n        this.logMetric(type, name, data);\n        this.uniqueEvents.add(eventName);\n    }\n\n    /**\n     * Preview metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handlePreviewMetric = (data: Object) => {\n        const { onMetric } = this.props;\n        onMetric({\n            ...data,\n            type: METRIC_TYPE_PREVIEW,\n        });\n    };\n\n    /**\n     * Data ready metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handleDataReadyMetric = (data: ElementsLoadMetricData, uniqueId?: string) => {\n        if (!isMarkSupported) {\n            return;\n        }\n\n        this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_DATA_READY, data, uniqueId);\n    };\n\n    /**\n     * JS ready metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handleReadyMetric = (data: ElementsLoadMetricData) => {\n        if (!isMarkSupported) {\n            return;\n        }\n\n        const { startMarkName } = this.props;\n        const metricData = {\n            ...data,\n            startMarkName,\n        };\n        this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_JS_READY, metricData);\n    };\n\n    /**\n     * Create an ISO Timestamp for right now.\n     *\n     * @returns {string}\n     */\n    getTimestamp(): string {\n        return new Date().toISOString();\n    }\n\n    render() {\n        const { children, onMetric, startMarkName, ...rest } = this.props;\n\n        return React.cloneElement(children, {\n            ...rest,\n            logger: this.loggerProps,\n        });\n    }\n}\n\nexport default Logger;\n"],"file":"Logger.js"}