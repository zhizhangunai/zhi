{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskForm.js"],"names":["React","noop","getProp","isEmpty","classNames","FormattedMessage","injectIntl","commonMessages","messages","commentFormMessages","Form","ModalActions","ContactDatalistItem","TextArea","DatePicker","Checkbox","PillSelectorDropdown","Button","FeatureFlag","PrimaryButton","TASK_COMPLETION_RULE_ANY","TASK_COMPLETION_RULE_ALL","TASK_EDIT_MODE_CREATE","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","INTERACTION_TARGET","TaskError","convertAssigneesToSelectorItems","approvers","map","target","newSelectorItem","id","name","item","value","text","TaskForm","getInitialFormState","only","invalidSubmitValidityState","setState","state","intl","props","message","approverTextInput","assigneeFieldMissingError","code","formatMessage","requiredFieldError","assigneeFieldInvalidError","invalidUserError","messageFieldError","taskDueDateError","invalidDateError","formValidityState","taskAssignees","length","taskName","taskDueDate","isValid","Object","values","every","val","fieldName","validateForm","undefined","onSubmitSuccess","clearForm","isLoading","e","onSubmitError","taskType","editMode","dueDate","addedAssignees","getAddedAssignees","removedAssignees","getRemovedAssignees","filter","assignee","type","getTime","currentApprovers","approverIds","approver","currentApprover","indexOf","currentApproverIds","createTask","editTask","completionRule","dueDateString","toISOString","completion_rule","description","due_at","handleSubmitSuccess","handleSubmitError","date","dateValue","Date","setHours","event","checked","getApproverWithQuery","pills","concat","pill","role","status","permissions","can_delete","can_update","option","index","splice","persist","currentTarget","onCancel","approverSelectorContacts","className","error","isDisabled","inputContainerClassNames","isCreateEditMode","selectedApprovers","approverOptions","find","pillSelectorOverlayClasses","scrollable","submitButtonMessage","tasksAddTaskFormSubmitLabel","tasksEditTaskFormSubmitLabel","shouldShowCompletionRule","isCompletionRuleCheckboxDisabled","isCompletionRuleCheckboxChecked","isForbiddenErrorOnEdit","handleInvalidSubmit","handleValidSubmit","getErrorByFieldname","tasksAddTaskFormSelectAssigneesLabel","handleApproverSelectorInput","handleApproverSelectorRemove","handleApproverSelectorSelect","approvalAddAssignee","taskCreateGroupLabel","email","taskAnyCheckboxLabel","taskAnyInfoGroupTooltip","handleCompletionRuleChange","taskAnyInfoTooltip","tasksAddTaskFormMessageLabel","handleChangeMessage","commentWrite","TASK_DATE_PICKER","tasksAddTaskFormDueDateLabel","handleDueDateChange","approvalSelectDate","APPROVAL_FORM_CANCEL","handleCancelClick","addResinInfo","tasksAddTaskFormCancelLabel","APPROVAL_FORM_POST","Component","TaskFormUnwrapped"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AAEA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,IAAP,MAAiB,gDAAjB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,mBAAP,MAAgC,kEAAhC;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,oBAAP,MAAiC,oEAAjC;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAOC,aAAP,MAA0B,qDAA1B;AACA,SACIC,wBADJ,EAEIC,wBAFJ,EAGIC,qBAHJ,EAIIC,mBAJJ,QAKO,uBALP;AAMA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,oCAArD;AAQA,OAAOC,SAAP,MAAsB,aAAtB;AAKA,OAAO,iBAAP;;AAwDA,SAASC,+BAAT,CAAyCC,SAAzC,EAAgG;AAC5F,SAAOA,SAAS,CAACC,GAAV,CAAc,gBAAgB;AAAA,QAAbC,MAAa,QAAbA,MAAa;AACjC,QAAMC,eAAmD,GAAG;AACxDC,MAAAA,EAAE,EAAEF,MAAM,CAACE,EAD6C;AAExDC,MAAAA,IAAI,EAAEH,MAAM,CAACG,IAF2C;AAGxDC,MAAAA,IAAI,EAAEJ,MAHkD;AAIxDK,MAAAA,KAAK,EAAEL,MAAM,CAACE,EAJ0C;AAKxDI,MAAAA,IAAI,EAAEN,MAAM,CAACG,IAL2C,CAKrC;;AALqC,KAA5D;AAQA,WAAOF,eAAP;AACH,GAVM,CAAP;AAWH;;IAEKM,Q;;;;;;;;;;;;;;;;;;4DASM,MAAKC,mBAAL,E;;mEAiBO,UAACC,IAAD,EAA2BC,0BAA3B,EAAwF;AACnG,YAAKC,QAAL,CAAc,UAAAC,KAAK,EAAI;AAAA,YACXC,IADW,GACF,MAAKC,KADH,CACXD,IADW;AAAA,YAEXf,SAFW,GAE+Bc,KAF/B,CAEXd,SAFW;AAAA,YAEAiB,OAFA,GAE+BH,KAF/B,CAEAG,OAFA;AAAA,YAESC,iBAFT,GAE+BJ,KAF/B,CAESI,iBAFT;AAGnB,YAAMC,yBAAyB,GAAG;AAC9BC,UAAAA,IAAI,EAAE,UADwB;AAE9BH,UAAAA,OAAO,EAAEF,IAAI,CAACM,aAAL,CAAmB1C,cAAc,CAAC2C,kBAAlC;AAFqB,SAAlC;AAIA,YAAMC,yBAAyB,GAAG;AAC9BH,UAAAA,IAAI,EAAE,SADwB;AAE9BH,UAAAA,OAAO,EAAEF,IAAI,CAACM,aAAL,CAAmB1C,cAAc,CAAC6C,gBAAlC;AAFqB,SAAlC;AAIA,YAAMC,iBAAiB,GAAG;AACtBL,UAAAA,IAAI,EAAE,UADgB;AAEtBH,UAAAA,OAAO,EAAEF,IAAI,CAACM,aAAL,CAAmB1C,cAAc,CAAC2C,kBAAlC;AAFa,SAA1B;AAIA,YAAMI,gBAAgB,GAAG;AACrBN,UAAAA,IAAI,EAAE,SADe;AAErBH,UAAAA,OAAO,EAAEF,IAAI,CAACM,aAAL,CAAmB1C,cAAc,CAACgD,gBAAlC;AAFY,SAAzB;AAIA,YAAMC,iBAAiB,GAAG;AACtBC,UAAAA,aAAa,EACT,CAACX,iBAAiB,CAACY,MAAlB,GAA2BP,yBAA3B,GAAuD,IAAxD,MACCvB,SAAS,CAAC8B,MAAV,GAAmB,IAAnB,GAA0BX,yBAD3B,CAFkB;AAItBY,UAAAA,QAAQ,EAAEd,OAAO,GAAG,IAAH,GAAUQ,iBAJL;AAKtBO,UAAAA,WAAW,EAAE1D,OAAO,CAACsC,0BAAD,EAA6B,2CAA7B,CAAP,GACPc,gBADO,GAEP;AAPgB,SAA1B;AASA,YAAMO,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcP,iBAAd,EAAiCQ,KAAjC,CAAuC,UAAAC,GAAG;AAAA,iBAAIA,GAAG,IAAI,IAAX;AAAA,SAA1C,CAAhB;AACA,eAAO;AACHJ,UAAAA,OAAO,EAAPA,OADG;AAEHL,UAAAA,iBAAiB,EAAEjB,IAAI,qBACZG,KAAK,CAACc,iBADM,sBACcjB,IADd,EACqBiB,iBAAiB,CAACjB,IAAD,CADtC,KAEjBiB;AAJH,SAAP;AAMH,OAnCD;AAoCH,K;;0EAEqB,UAACU,SAAD,EAAkC;AAAA,UAC5CV,iBAD4C,GACtB,MAAKd,KADiB,CAC5Cc,iBAD4C;AAEpD,aAAOA,iBAAiB,CAACU,SAAD,CAAjB,GAA+BV,iBAAiB,CAACU,SAAD,CAAjB,CAA6BrB,OAA5D,GAAsE,IAA7E;AACH,K;;gEAEW;AAAA,aAAM,MAAKJ,QAAL,CAAc,MAAKH,mBAAL,EAAd,CAAN;AAAA,K;;0EAEU,UAACE,0BAAD,EAA8D;AAChF,UAAI,CAACrC,OAAO,CAACqC,0BAAD,CAAZ,EAA0C;AACtC,cAAK2B,YAAL,CAAkBC,SAAlB,EAA6B5B,0BAA7B;AACH,OAFD,MAEO;AACH,cAAK2B,YAAL;AACH;AACJ,K;;0EAEqB,YAAM;AAAA,UAChBE,eADgB,GACI,MAAKzB,KADT,CAChByB,eADgB;;AAExB,UAAIA,eAAJ,EAAqB;AACjBA,QAAAA,eAAe;AAClB;;AAED,YAAKC,SAAL;;AACA,YAAK7B,QAAL,CAAc;AAAE8B,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,K;;wEAEmB,UAACC,CAAD,EAAyB;AAAA,UACjCC,aADiC,GACf,MAAK7B,KADU,CACjC6B,aADiC;AAEzCA,MAAAA,aAAa,CAACD,CAAD,CAAb;;AACA,YAAK/B,QAAL,CAAc;AAAE8B,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,K;;mEAEc,YAAc;AAAA,wBACU,MAAK3B,KADf;AAAA,UACjBZ,EADiB,eACjBA,EADiB;AAAA,UACb0C,QADa,eACbA,QADa;AAAA,UACHC,QADG,eACHA,QADG;AAAA,UAEjBC,OAFiB,GAEL,MAAKlC,KAFA,CAEjBkC,OAFiB;;AAGzB,UAAMC,cAAc,GAAG,MAAKC,iBAAL,EAAvB;;AACA,UAAMC,gBAAgB,GAAG,MAAKC,mBAAL,EAAzB;;AAEA,aAAO;AACH,6BAAqBhD,EADlB;AAEH,+BAAuB0C,QAFpB;AAGH,gCAAwBC,QAAQ,KAAKpD,mBAHlC;AAIH,wCAAgCsD,cAAc,CAACI,MAAf,CAAsB,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACpD,MAAT,CAAgBqD,IAAhB,KAAyB,MAA7B;AAAA,SAA9B,EAAmEzB,MAJhG;AAKH,sCAA8BmB,cAAc,CAACI,MAAf,CAAsB,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACpD,MAAT,CAAgBqD,IAAhB,KAAyB,OAA7B;AAAA,SAA9B,EAAoEzB,MAL/F;AAMH,0CAAkCqB,gBAAgB,CAACrB,MANhD;AAOH,qCAA6BmB,cAAc,CAAChD,GAAf,CAAmB,UAAAqD,QAAQ;AAAA,iBAAIA,QAAQ,CAACpD,MAAT,CAAgBE,EAApB;AAAA,SAA3B,CAP1B;AAQH,uCAA+B+C,gBAAgB,CAAClD,GAAjB,CAAqB,UAAAqD,QAAQ;AAAA,iBAAIA,QAAQ,CAACpD,MAAT,CAAgBE,EAApB;AAAA,SAA7B,CAR5B;AASH,8BAAsB4C,OAAO,IAAIA,OAAO,CAACQ,OAAR;AAT9B,OAAP;AAWH,K;;wEAEmB,YAAiC;AACjD;AADiD,UAEzCxD,SAFyC,GAE3B,MAAKgB,KAFsB,CAEzChB,SAFyC;AAAA,UAG9ByD,gBAH8B,GAGT,MAAK3C,KAHI,CAGzCd,SAHyC;AAIjD,UAAM0D,WAAW,GAAG1D,SAAS,CAACC,GAAV,CAAc,UAAA0D,QAAQ;AAAA,eAAIA,QAAQ,CAACvD,EAAb;AAAA,OAAtB,CAApB;AACA,aAAOqD,gBAAgB,CAACJ,MAAjB,CAAwB,UAAAO,eAAe;AAAA,eAAIF,WAAW,CAACG,OAAZ,CAAoBD,eAAe,CAACxD,EAApC,MAA4C,CAAC,CAAjD;AAAA,OAAvC,CAAP;AACH,K;;0EAEqB,YAAiC;AACnD;AADmD,UAE3CJ,SAF2C,GAE7B,MAAKgB,KAFwB,CAE3ChB,SAF2C;AAAA,UAGhCyD,gBAHgC,GAGX,MAAK3C,KAHM,CAG3Cd,SAH2C;AAInD,UAAM8D,kBAAkB,GAAGL,gBAAgB,CAACxD,GAAjB,CAAqB,UAAA2D,eAAe;AAAA,eAAIA,eAAe,CAACxD,EAApB;AAAA,OAApC,CAA3B;AACA,aAAOJ,SAAS,CAACqD,MAAV,CAAiB,UAAAM,QAAQ;AAAA,eAAIG,kBAAkB,CAACD,OAAnB,CAA2BF,QAAQ,CAACvD,EAApC,MAA4C,CAAC,CAAjD;AAAA,OAAzB,CAAP;AACH,K;;wEAEmB,YAAY;AAAA,yBAC6B,MAAKY,KADlC;AAAA,UACpBZ,EADoB,gBACpBA,EADoB;AAAA,UAChB2D,UADgB,gBAChBA,UADgB;AAAA,UACJC,QADI,gBACJA,QADI;AAAA,UACMjB,QADN,gBACMA,QADN;AAAA,UACgBD,QADhB,gBACgBA,QADhB;AAAA,wBAEuD,MAAKhC,KAF5D;AAAA,UAEpBG,OAFoB,eAEpBA,OAFoB;AAAA,UAEAwC,gBAFA,eAEXzD,SAFW;AAAA,UAEkBgD,OAFlB,eAEkBA,OAFlB;AAAA,UAE2BiB,cAF3B,eAE2BA,cAF3B;AAAA,UAE2ChC,OAF3C,eAE2CA,OAF3C;AAG5B,UAAMiC,aAAa,GAAGlB,OAAO,IAAIA,OAAO,CAACmB,WAAR,EAAjC;AAEA,UAAI,CAAClC,OAAL,EAAc;;AAEd,YAAKpB,QAAL,CAAc;AAAE8B,QAAAA,SAAS,EAAE;AAAb,OAAd;;AAEA,UAAII,QAAQ,KAAKpD,mBAAb,IAAoCqE,QAAxC,EAAkD;AAC9CA,QAAAA,QAAQ,CACJ;AACI5D,UAAAA,EAAE,EAAFA,EADJ;AAEIgE,UAAAA,eAAe,EAAEH,cAFrB;AAGII,UAAAA,WAAW,EAAEpD,OAHjB;AAIIqD,UAAAA,MAAM,EAAEJ,aAJZ;AAKIjB,UAAAA,cAAc,EAAElD,+BAA+B,CAAC,MAAKmD,iBAAL,EAAD,CALnD;AAMIC,UAAAA,gBAAgB,EAAE,MAAKC,mBAAL;AANtB,SADI,EASJ,MAAKmB,mBATD,EAUJ,MAAKC,iBAVD,CAAR;AAYH,OAbD,MAaO;AACHT,QAAAA,UAAU,CACN9C,OADM,EAENlB,+BAA+B,CAAC0D,gBAAD,CAFzB,EAGNX,QAHM,EAINoB,aAJM,EAKND,cALM,EAMN,MAAKM,mBANC,EAON,MAAKC,iBAPC,CAAV;AASH;AACJ,K;;0EAEqB,UAACC,IAAD,EAAyB;AAC3C,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAID,IAAJ,EAAU;AACNC,QAAAA,SAAS,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAZ,CADM,CAEN;AACA;;AACAC,QAAAA,SAAS,CAACE,QAAV,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,GAA/B;AACH;;AACD,YAAK/D,QAAL,CAAc;AAAEmC,QAAAA,OAAO,EAAE0B;AAAX,OAAd;;AACA,YAAKnC,YAAL,CAAkB,aAAlB;AACH,K;;iFAE4B,UAACsC,KAAD,EAAkD;AAC3E,YAAKhE,QAAL,CAAc;AAAEoD,QAAAA,cAAc,EAAEY,KAAK,CAAC3E,MAAN,CAAa4E,OAAb,GAAuBtF,wBAAvB,GAAkDC;AAApE,OAAd;AACH,K;;kFAE6B,UAACc,KAAD,EAAsB;AAAA,kCACR,MAAKS,KADG,CACxC+D,oBADwC;AAAA,UACxCA,oBADwC,sCACjB1G,IADiB;;AAEhD,YAAKwC,QAAL,CAAc;AAAEK,QAAAA,iBAAiB,EAAEX;AAArB,OAAd;;AACAwE,MAAAA,oBAAoB,CAACxE,KAAD,CAApB;AACH,K;;mFAE8B,UAACyE,KAAD,EAA6B;AACxD,YAAKnE,QAAL,CAAc;AACVb,QAAAA,SAAS,EAAE,MAAKc,KAAL,CAAWd,SAAX,CAAqBiF,MAArB,CACPD,KAAK,CAAC/E,GAAN,CAAU,UAAAiF,IAAI,EAAI;AACd,iBAAO;AACH9E,YAAAA,EAAE,EAAE,EADD;AAEHF,YAAAA,MAAM,EAAEgF,IAAI,CAAC5E,IAFV;AAGH6E,YAAAA,IAAI,EAAE,UAHH;AAIH5B,YAAAA,IAAI,EAAE,mBAJH;AAKH6B,YAAAA,MAAM,EAAE,aALL;AAMHC,YAAAA,WAAW,EAAE;AAAEC,cAAAA,UAAU,EAAE,KAAd;AAAqBC,cAAAA,UAAU,EAAE;AAAjC;AANV,WAAP;AAQH,SATD,CADO,CADD;AAaVrE,QAAAA,iBAAiB,EAAE;AAbT,OAAd;;AAgBA,YAAKqB,YAAL,CAAkB,eAAlB;AACH,K;;mFAE8B,UAACiD,MAAD,EAAcC,KAAd,EAAsC;AACjE,UAAMzF,SAAS,sBAAO,MAAKc,KAAL,CAAWd,SAAlB,CAAf;;AACAA,MAAAA,SAAS,CAAC0F,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB;;AACA,YAAK5E,QAAL,CAAc;AAAEb,QAAAA,SAAS,EAATA;AAAF,OAAd;;AACA,YAAKuC,YAAL,CAAkB,eAAlB;AACH,K;;0EAEqB,UAACK,CAAD,EAAiD;AACnEA,MAAAA,CAAC,CAAC+C,OAAF;;AACA,YAAK9E,QAAL,CAAc;AAAEI,QAAAA,OAAO,EAAE2B,CAAC,CAACgD,aAAF,CAAgBrF;AAA3B,OAAd;;AACA,YAAKgC,YAAL,CAAkB,UAAlB;AACH,K;;wEAEmB,YAAM;AACtB,YAAKvB,KAAL,CAAW6E,QAAX;AACH,K;;;;;;;0CApNqB;AAAA,yBAC0C,KAAK7E,KAD/C;AAAA,UACVgC,OADU,gBACVA,OADU;AAAA,UACD5C,EADC,gBACDA,EADC;AAAA,UACGa,OADH,gBACGA,OADH;AAAA,UACYjB,SADZ,gBACYA,SADZ;AAAA,UACuBiE,cADvB,gBACuBA,cADvB;AAElB,aAAO;AACH7D,QAAAA,EAAE,EAAFA,EADG;AAEH6D,QAAAA,cAAc,EAAEA,cAAc,IAAIxE,wBAF/B;AAGHO,QAAAA,SAAS,EAATA,SAHG;AAIHkB,QAAAA,iBAAiB,EAAE,EAJhB;AAKH8B,QAAAA,OAAO,EAAEA,OAAO,GAAG,IAAI2B,IAAJ,CAAS3B,OAAT,CAAH,GAAuB,IALpC;AAMHpB,QAAAA,iBAAiB,EAAE,EANhB;AAOHX,QAAAA,OAAO,EAAPA,OAPG;AAQH0B,QAAAA,SAAS,EAAE,KARR;AASHV,QAAAA,OAAO,EAAE;AATN,OAAP;AAWH;;;6BAyMQ;AAAA;AAAA;;AAAA,yBACwF,KAAKjB,KAD7F;AAAA,UACG8E,wBADH,gBACGA,wBADH;AAAA,UAC6BC,SAD7B,gBAC6BA,SAD7B;AAAA,UACwCC,KADxC,gBACwCA,KADxC;AAAA,UAC+CC,UAD/C,gBAC+CA,UAD/C;AAAA,UAC2DlF,IAD3D,gBAC2DA,IAD3D;AAAA,UACiEgC,QADjE,gBACiEA,QADjE;AAAA,UAC2ED,QAD3E,gBAC2EA,QAD3E;AAAA,yBAEiF,KAAKhC,KAFtF;AAAA,UAEGkC,OAFH,gBAEGA,OAFH;AAAA,UAEYhD,SAFZ,gBAEYA,SAFZ;AAAA,UAEuBiB,OAFvB,gBAEuBA,OAFvB;AAAA,UAEgCW,iBAFhC,gBAEgCA,iBAFhC;AAAA,UAEmDe,SAFnD,gBAEmDA,SAFnD;AAAA,UAE8DsB,cAF9D,gBAE8DA,cAF9D;AAGL,UAAMiC,wBAAwB,GAAG1H,UAAU,CAAC,0BAAD,EAA6B,wBAA7B,EAAuDuH,SAAvD,CAA3C;AACA,UAAMI,gBAAgB,GAAGpD,QAAQ,KAAKrD,qBAAtC;AACA,UAAM0G,iBAAiB,GAAGrG,+BAA+B,CAACC,SAAD,CAAzD,CALK,CAOL;AACA;;AACA,UAAMqG,eAAe,GAAGP,wBAAwB,CAACzC,MAAzB,CACpB;AAAA,YAAGjD,EAAH,SAAGA,EAAH;AAAA,eAAY,CAACgG,iBAAiB,CAACE,IAAlB,CAAuB;AAAA,cAAG/F,KAAH,SAAGA,KAAH;AAAA,iBAAeA,KAAK,KAAKH,EAAzB;AAAA,SAAvB,CAAb;AAAA,OADoB,CAAxB;AAIA,UAAMmG,0BAA0B,GAAG/H,UAAU,CAAC;AAC1CgI,QAAAA,UAAU,EAAEH,eAAe,CAACvE,MAAhB,GAAyB;AADK,OAAD,CAA7C;AAIA,UAAM2E,mBAAmB,GAAGN,gBAAgB,GACtCvH,QAAQ,CAAC8H,2BAD6B,GAEtC9H,QAAQ,CAAC+H,4BAFf;AAGA,UAAMC,wBAAwB,GAAG5G,SAAS,CAAC8B,MAAV,GAAmB,CAApD,CApBK,CAsBL;AACA;AACA;;AACA,UAAM+E,gCAAgC,GAClC7G,SAAS,CAACqD,MAAV,CAAiB,UAAAM,QAAQ;AAAA,eAAIA,QAAQ,CAACzD,MAAT,CAAgBqD,IAAhB,KAAyB,OAA7B;AAAA,OAAzB,EAA+DzB,MAA/D,IAAyE,CAAzE,IACA9B,SAAS,CAACqD,MAAV,CAAiB,UAAAM,QAAQ;AAAA,eAAIA,QAAQ,CAACzD,MAAT,CAAgBqD,IAAhB,KAAyB,MAA7B;AAAA,OAAzB,EAA8DzB,MAA9D,IAAwE,CAF5E;AAIA,UAAMgF,+BAA+B,GAAG7C,cAAc,KAAKzE,wBAA3D;AACA,UAAMuH,sBAAsB,GAAGpE,SAAS,IAAKrE,OAAO,CAAC0H,KAAD,EAAQ,QAAR,CAAP,KAA6B,GAA7B,IAAoC,CAACG,gBAAlF;AAEA,aACI;AAAK,QAAA,SAAS,EAAED,wBAAhB;AAA0C,gCAAqB;AAA/D,SACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAEnD,QAArB;AAA+B,QAAA,KAAK,EAAEiD,KAAtC;AAA6C,QAAA,QAAQ,EAAElD;AAAvD,QADJ,EAEI,oBAAC,IAAD;AACI,QAAA,iBAAiB,EAAElB,iBADvB;AAEI,QAAA,eAAe,EAAE,KAAKoF,mBAF1B;AAGI,QAAA,aAAa,EAAE,KAAKC;AAHxB,SAKI,oBAAC,oBAAD;AACI,QAAA,SAAS,EAAEV,0BADf;AAEI,QAAA,KAAK,EAAE,KAAKW,mBAAL,CAAyB,eAAzB,CAFX;AAGI,QAAA,QAAQ,EAAEH,sBAHd;AAII,QAAA,UAAU,EAAE;AAAE,yBAAe;AAAjB,SAJhB;AAKI,QAAA,UAAU,MALd;AAMI,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBnI,QAAQ,CAACuI,oCAA/B,CANX;AAOI,QAAA,IAAI,EAAC,eAPT;AAQI,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAAC5E,YAAL,CAAkB,eAAlB,CAAN;AAAA,SARZ;AASI,QAAA,OAAO,EAAE,KAAK6E,2BATlB;AAUI,QAAA,QAAQ,EAAE,KAAKC,4BAVnB;AAWI,QAAA,QAAQ,EAAE,KAAKC,4BAXnB;AAYI,QAAA,WAAW,EAAEvG,IAAI,CAACM,aAAL,CAAmBxC,mBAAmB,CAAC0I,mBAAvC,CAZjB;AAaI,QAAA,eAAe,EAAEnB,iBAbrB;AAcI,QAAA,eAAe,EAAEC,eAdrB;AAeI,QAAA,yBAAyB,MAf7B;AAgBI,QAAA,yBAAyB,MAhB7B;AAiBI,QAAA,gBAAgB,EAAE;AAAA,iBAAM,MAAI,CAAC9D,YAAL,CAAkB,eAAlB,CAAN;AAAA;AAjBtB,SAmBK8D,eAAe,CAACpG,GAAhB,CAAoB;AAAA,YAAGG,EAAH,SAAGA,EAAH;AAAA,YAAOC,IAAP,SAAOA,IAAP;AAAA,+BAAaC,IAAb;AAAA,YAAaA,IAAb,2BAAoB,EAApB;AAAA,eACjB,oBAAC,mBAAD;AACI,UAAA,GAAG,EAAEF,EADT;AAEI,yBAAY,sBAFhB;AAGI,UAAA,IAAI,EAAEC,IAHV;AAII,UAAA,QAAQ,EACJC,IAAI,CAACiD,IAAL,KAAc,OAAd,GACI,oBAAC,gBAAD,EAAsB3E,QAAQ,CAAC4I,oBAA/B,CADJ,GAGIlH,IAAI,CAACmH;AARjB,UADiB;AAAA,OAApB,CAnBL,CALJ,EAwCKb,wBAAwB,IACrB,0CACI,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAC;AAArB,SACI,oBAAC,QAAD;AACI,uBAAY,0CADhB;AAEI,QAAA,SAAS,EAAEE,+BAFf;AAGI,QAAA,UAAU,EAAED,gCAAgC,IAAIE,sBAHpD;AAII,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBnI,QAAQ,CAAC8I,oBAA/B,CAJX;AAKI,QAAA,OAAO,EAAE3G,IAAI,CAACM,aAAL,CAAmBzC,QAAQ,CAAC+I,uBAA5B,CALb;AAMI,QAAA,IAAI,EAAC,gBANT;AAOI,QAAA,QAAQ,EAAE,KAAKC;AAPnB,QADJ,CADJ,EAYI,oBAAC,WAAD;AAAa,QAAA,GAAG,MAAhB;AAAiB,QAAA,OAAO,EAAC;AAAzB,SACI,oBAAC,QAAD;AACI,uBAAY,oCADhB;AAEI,QAAA,SAAS,EAAEd,+BAFf;AAGI,QAAA,UAAU,EAAED,gCAAgC,IAAIE,sBAHpD;AAII,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBnI,QAAQ,CAAC8I,oBAA/B,CAJX;AAKI,QAAA,OAAO,EAAE3G,IAAI,CAACM,aAAL,CAAmBzC,QAAQ,CAACiJ,kBAA5B,CALb;AAMI,QAAA,IAAI,EAAC,gBANT;AAOI,QAAA,QAAQ,EAAE,KAAKD;AAPnB,QADJ,CAZJ,CAzCR,EAmEI,oBAAC,QAAD;AACI,QAAA,SAAS,EAAC,qBADd;AAEI,uBAAY,sBAFhB;AAGI,QAAA,QAAQ,EAAE3B,UAAU,IAAIc,sBAH5B;AAII,QAAA,KAAK,EAAE,KAAKG,mBAAL,CAAyB,UAAzB,CAJX;AAKI,QAAA,UAAU,MALd;AAMI,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBtI,QAAQ,CAACkJ,4BAA/B,CANX;AAOI,QAAA,IAAI,EAAC,UAPT;AAQI,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAACvF,YAAL,CAAkB,UAAlB,CAAN;AAAA,SARZ;AASI,QAAA,QAAQ,EAAE,KAAKwF,mBATnB;AAUI,QAAA,WAAW,EAAEhH,IAAI,CAACM,aAAL,CAAmBxC,mBAAmB,CAACmJ,YAAvC,CAVjB;AAWI,QAAA,KAAK,EAAE/G;AAXX,QAnEJ,EAgFI,oBAAC,UAAD;AACI,QAAA,SAAS,EAAC,6BADd;AAEI,QAAA,KAAK,EAAE,KAAKiG,mBAAL,CAAyB,aAAzB,CAFX;AAGI,QAAA,UAAU,sCACLrH,kBADK,EACgBD,gBAAgB,CAACqI,gBADjC,0BAEN,aAFM,EAES,sBAFT,SAHd;AAOI,QAAA,YAAY,MAPhB;AAQI,QAAA,UAAU,EAAElB,sBARhB;AASI,QAAA,sBAAsB,MAT1B;AAUI,QAAA,UAAU,EAAE,KAVhB;AAWI,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBnI,QAAQ,CAACsJ,4BAA/B,CAXX;AAYI,QAAA,OAAO,EAAE,IAAIvD,IAAJ,EAZb;AAaI,QAAA,IAAI,EAAC,aAbT;AAcI,QAAA,QAAQ,EAAE,KAAKwD,mBAdnB;AAeI,QAAA,WAAW,EAAEpH,IAAI,CAACM,aAAL,CAAmBxC,mBAAmB,CAACuJ,kBAAvC,CAfjB;AAgBI,QAAA,KAAK,EAAEpF,OAAO,IAAIR;AAhBtB,QAhFJ,EAkGI,oBAAC,YAAD,QACI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAC,2BADd;AAEI,6BAAmB5C,gBAAgB,CAACyI,oBAFxC;AAGI,uBAAY,yBAHhB;AAII,QAAA,OAAO,EAAE,KAAKC,iBAJlB;AAKI,QAAA,UAAU,EAAE3F,SALhB;AAMI,QAAA,IAAI,EAAC;AANT,SAOQ,KAAK4F,YAAL,EAPR,GASI,oBAAC,gBAAD,EAAsB3J,QAAQ,CAAC4J,2BAA/B,CATJ,CADJ,EAYI,oBAAC,aAAD;AACI,QAAA,SAAS,EAAC,2BADd;AAEI,6BAAmB5I,gBAAgB,CAAC6I,kBAFxC;AAGI,uBAAY,yBAHhB;AAII,QAAA,UAAU,EAAE1B,sBAJhB;AAKI,QAAA,SAAS,EAAEpE;AALf,SAMQ,KAAK4F,YAAL,EANR,GAQI,oBAAC,gBAAD,EAAsB9B,mBAAtB,CARJ,CAZJ,CAlGJ,CAFJ,CADJ,CADJ;AAiIH;;;;EAlYkBrI,KAAK,CAACsK,S,GAqY7B;;;gBArYMjI,Q,kBACoB;AAClBT,EAAAA,SAAS,EAAE,EADO;AAElB8F,EAAAA,wBAAwB,EAAE,EAFR;AAGlB/C,EAAAA,QAAQ,EAAErD,qBAHQ;AAIlBU,EAAAA,EAAE,EAAE,EAJc;AAKlBa,EAAAA,OAAO,EAAE;AALS,C;;AAqY1B,SAASR,QAAQ,IAAIkI,iBAArB;AAGA,eAAejK,UAAU,CAAC+B,QAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport commonMessages from '../../../../common/messages';\nimport messages from './messages';\nimport commentFormMessages from '../comment-form/messages';\nimport Form from '../../../../components/form-elements/form/Form';\nimport ModalActions from '../../../../components/modal/ModalActions';\nimport ContactDatalistItem from '../../../../components/contact-datalist-item/ContactDatalistItem';\nimport TextArea from '../../../../components/text-area';\nimport DatePicker from '../../../../components/date-picker/DatePicker';\nimport Checkbox from '../../../../components/checkbox';\nimport PillSelectorDropdown from '../../../../components/pill-selector-dropdown/PillSelectorDropdown';\nimport Button from '../../../../components/button/Button';\nimport { FeatureFlag } from '../../../common/feature-checking';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport {\n    TASK_COMPLETION_RULE_ANY,\n    TASK_COMPLETION_RULE_ALL,\n    TASK_EDIT_MODE_CREATE,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport { ACTIVITY_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskType,\n    TaskEditMode,\n    TaskUpdatePayload,\n} from '../../../../common/types/tasks';\nimport TaskError from './TaskError';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\nimport type { ElementsXhrError } from '../../../../common/types/api';\nimport type { SelectorItems, SelectorItem, UserMini, GroupMini } from '../../../../common/types/core';\n\nimport './TaskForm.scss';\n\ntype TaskFormProps = {|\n    error?: { status: number }, // TODO: update to ElementsXhrError once API supports it\n    isDisabled?: boolean,\n    onCancel: () => any,\n    onSubmitError: (e: ElementsXhrError) => any,\n    onSubmitSuccess: () => any,\n    taskType: TaskType,\n|};\n\ntype TaskFormFieldProps = {|\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?string,\n    id: string,\n    message: string,\n|};\n\ntype TaskFormConsumerProps = {|\n    ...TaskFormFieldProps,\n    approverSelectorContacts: SelectorItems<UserMini | GroupMini>,\n    className?: string,\n    createTask: (\n        text: string,\n        approvers: SelectorItems<>,\n        taskType: TaskType,\n        dueDate: ?string,\n        completionRule: TaskCompletionRule,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ) => any,\n    editMode?: TaskEditMode,\n    editTask?: (task: TaskUpdatePayload, onSuccess: ?Function, onError: ?Function) => any,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n|};\n\ntype Props = TaskFormProps & TaskFormConsumerProps & InjectIntlProvidedProps;\n\ntype TaskFormFieldName = 'taskName' | 'taskAssignees' | 'taskDueDate';\n\ntype TaskFormInvalidSubmitState = { [key: TaskFormFieldName]: ?{ validityState: ?{ patternMismatch: boolean } } };\n\ntype State = {|\n    approverTextInput: string, // partial text input value for approver field before autocomplete/select\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?Date,\n    formValidityState: { [key: TaskFormFieldName]: ?{ code: string, message: string } },\n    id: string,\n    isLoading: boolean,\n    isValid: ?boolean,\n    message: string,\n|};\n\nfunction convertAssigneesToSelectorItems(approvers: Array<TaskCollabAssignee>): SelectorItems<> {\n    return approvers.map(({ target }) => {\n        const newSelectorItem: SelectorItem<UserMini | GroupMini> = {\n            id: target.id,\n            name: target.name,\n            item: target,\n            value: target.id,\n            text: target.name, // for PillSelectorDropdown SelectorOptions type\n        };\n\n        return newSelectorItem;\n    });\n}\n\nclass TaskForm extends React.Component<Props, State> {\n    static defaultProps = {\n        approvers: [],\n        approverSelectorContacts: [],\n        editMode: TASK_EDIT_MODE_CREATE,\n        id: '',\n        message: '',\n    };\n\n    state = this.getInitialFormState();\n\n    getInitialFormState() {\n        const { dueDate, id, message, approvers, completionRule } = this.props;\n        return {\n            id,\n            completionRule: completionRule || TASK_COMPLETION_RULE_ALL,\n            approvers,\n            approverTextInput: '',\n            dueDate: dueDate ? new Date(dueDate) : null,\n            formValidityState: {},\n            message,\n            isLoading: false,\n            isValid: null,\n        };\n    }\n\n    validateForm = (only?: TaskFormFieldName, invalidSubmitValidityState?: ?TaskFormInvalidSubmitState) => {\n        this.setState(state => {\n            const { intl } = this.props;\n            const { approvers, message, approverTextInput } = state;\n            const assigneeFieldMissingError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const assigneeFieldInvalidError = {\n                code: 'invalid',\n                message: intl.formatMessage(commonMessages.invalidUserError),\n            };\n            const messageFieldError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const taskDueDateError = {\n                code: 'invalid',\n                message: intl.formatMessage(commonMessages.invalidDateError),\n            };\n            const formValidityState = {\n                taskAssignees:\n                    (approverTextInput.length ? assigneeFieldInvalidError : null) ||\n                    (approvers.length ? null : assigneeFieldMissingError),\n                taskName: message ? null : messageFieldError,\n                taskDueDate: getProp(invalidSubmitValidityState, 'taskDueDate.validityState.patternMismatch')\n                    ? taskDueDateError\n                    : null,\n            };\n            const isValid = Object.values(formValidityState).every(val => val == null);\n            return {\n                isValid,\n                formValidityState: only\n                    ? { ...state.formValidityState, [only]: formValidityState[only] }\n                    : formValidityState,\n            };\n        });\n    };\n\n    getErrorByFieldname = (fieldName: TaskFormFieldName) => {\n        const { formValidityState } = this.state;\n        return formValidityState[fieldName] ? formValidityState[fieldName].message : null;\n    };\n\n    clearForm = () => this.setState(this.getInitialFormState());\n\n    handleInvalidSubmit = (invalidSubmitValidityState?: ?TaskFormInvalidSubmitState) => {\n        if (!isEmpty(invalidSubmitValidityState)) {\n            this.validateForm(undefined, invalidSubmitValidityState);\n        } else {\n            this.validateForm();\n        }\n    };\n\n    handleSubmitSuccess = () => {\n        const { onSubmitSuccess } = this.props;\n        if (onSubmitSuccess) {\n            onSubmitSuccess();\n        }\n\n        this.clearForm();\n        this.setState({ isLoading: false });\n    };\n\n    handleSubmitError = (e: ElementsXhrError) => {\n        const { onSubmitError } = this.props;\n        onSubmitError(e);\n        this.setState({ isLoading: false });\n    };\n\n    addResinInfo = (): Object => {\n        const { id, taskType, editMode } = this.props;\n        const { dueDate } = this.state;\n        const addedAssignees = this.getAddedAssignees();\n        const removedAssignees = this.getRemovedAssignees();\n\n        return {\n            'data-resin-taskid': id,\n            'data-resin-tasktype': taskType,\n            'data-resin-isediting': editMode === TASK_EDIT_MODE_EDIT,\n            'data-resin-numassigneesadded': addedAssignees.filter(assignee => assignee.target.type === 'user').length,\n            'data-resin-numgroupssadded': addedAssignees.filter(assignee => assignee.target.type === 'group').length,\n            'data-resin-numassigneesremoved': removedAssignees.length,\n            'data-resin-assigneesadded': addedAssignees.map(assignee => assignee.target.id),\n            'data-resin-assigneesremoved': removedAssignees.map(assignee => assignee.target.id),\n            'data-resin-duedate': dueDate && dueDate.getTime(),\n        };\n    };\n\n    getAddedAssignees = (): Array<TaskCollabAssignee> => {\n        // Added assignees are the ones in state that weren't in the prop\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const approverIds = approvers.map(approver => approver.id);\n        return currentApprovers.filter(currentApprover => approverIds.indexOf(currentApprover.id) === -1);\n    };\n\n    getRemovedAssignees = (): Array<TaskCollabAssignee> => {\n        // Assignees to remove are the ones in the prop that cannot be found in state\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const currentApproverIds = currentApprovers.map(currentApprover => currentApprover.id);\n        return approvers.filter(approver => currentApproverIds.indexOf(approver.id) === -1);\n    };\n\n    handleValidSubmit = (): void => {\n        const { id, createTask, editTask, editMode, taskType } = this.props;\n        const { message, approvers: currentApprovers, dueDate, completionRule, isValid } = this.state;\n        const dueDateString = dueDate && dueDate.toISOString();\n\n        if (!isValid) return;\n\n        this.setState({ isLoading: true });\n\n        if (editMode === TASK_EDIT_MODE_EDIT && editTask) {\n            editTask(\n                {\n                    id,\n                    completion_rule: completionRule,\n                    description: message,\n                    due_at: dueDateString,\n                    addedAssignees: convertAssigneesToSelectorItems(this.getAddedAssignees()),\n                    removedAssignees: this.getRemovedAssignees(),\n                },\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        } else {\n            createTask(\n                message,\n                convertAssigneesToSelectorItems(currentApprovers),\n                taskType,\n                dueDateString,\n                completionRule,\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        }\n    };\n\n    handleDueDateChange = (date: ?string): void => {\n        let dateValue = null;\n        if (date) {\n            dateValue = new Date(date);\n            // The date given to us is midnight of the date selected.\n            // Modify date to be the end of day (minus 1 millisecond) for the given due date\n            dateValue.setHours(23, 59, 59, 999);\n        }\n        this.setState({ dueDate: dateValue });\n        this.validateForm('taskDueDate');\n    };\n\n    handleCompletionRuleChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.setState({ completionRule: event.target.checked ? TASK_COMPLETION_RULE_ANY : TASK_COMPLETION_RULE_ALL });\n    };\n\n    handleApproverSelectorInput = (value: any): void => {\n        const { getApproverWithQuery = noop } = this.props;\n        this.setState({ approverTextInput: value });\n        getApproverWithQuery(value);\n    };\n\n    handleApproverSelectorSelect = (pills: Array<any>): void => {\n        this.setState({\n            approvers: this.state.approvers.concat(\n                pills.map(pill => {\n                    return {\n                        id: '',\n                        target: pill.item,\n                        role: 'ASSIGNEE',\n                        type: 'task_collaborator',\n                        status: 'NOT_STARTED',\n                        permissions: { can_delete: false, can_update: false },\n                    };\n                }),\n            ),\n            approverTextInput: '',\n        });\n\n        this.validateForm('taskAssignees');\n    };\n\n    handleApproverSelectorRemove = (option: any, index: number): void => {\n        const approvers = [...this.state.approvers];\n        approvers.splice(index, 1);\n        this.setState({ approvers });\n        this.validateForm('taskAssignees');\n    };\n\n    handleChangeMessage = (e: SyntheticInputEvent<HTMLTextAreaElement>) => {\n        e.persist();\n        this.setState({ message: e.currentTarget.value });\n        this.validateForm('taskName');\n    };\n\n    handleCancelClick = () => {\n        this.props.onCancel();\n    };\n\n    render() {\n        const { approverSelectorContacts, className, error, isDisabled, intl, editMode, taskType } = this.props;\n        const { dueDate, approvers, message, formValidityState, isLoading, completionRule } = this.state;\n        const inputContainerClassNames = classNames('bcs-task-input-container', 'bcs-task-input-is-open', className);\n        const isCreateEditMode = editMode === TASK_EDIT_MODE_CREATE;\n        const selectedApprovers = convertAssigneesToSelectorItems(approvers);\n\n        // filter out selected approvers\n        // map to datalist item format\n        const approverOptions = approverSelectorContacts.filter(\n            ({ id }) => !selectedApprovers.find(({ value }) => value === id),\n        );\n\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: approverOptions.length > 4,\n        });\n\n        const submitButtonMessage = isCreateEditMode\n            ? messages.tasksAddTaskFormSubmitLabel\n            : messages.tasksEditTaskFormSubmitLabel;\n        const shouldShowCompletionRule = approvers.length > 0;\n\n        // Enable checkbox when there is a group or multiple users being assigned\n        // TODO: consider setting contants for assignee types to src/constants.js\n        // - move from src/features/collaborator-avatars/constants.js\n        const isCompletionRuleCheckboxDisabled =\n            approvers.filter(approver => approver.target.type === 'group').length <= 0 &&\n            approvers.filter(approver => approver.target.type === 'user').length <= 1;\n\n        const isCompletionRuleCheckboxChecked = completionRule === TASK_COMPLETION_RULE_ANY;\n        const isForbiddenErrorOnEdit = isLoading || (getProp(error, 'status') === 403 && !isCreateEditMode);\n\n        return (\n            <div className={inputContainerClassNames} data-resin-component=\"taskform\">\n                <div className=\"bcs-task-input-form-container\">\n                    <TaskError editMode={editMode} error={error} taskType={taskType} />\n                    <Form\n                        formValidityState={formValidityState}\n                        onInvalidSubmit={this.handleInvalidSubmit}\n                        onValidSubmit={this.handleValidSubmit}\n                    >\n                        <PillSelectorDropdown\n                            className={pillSelectorOverlayClasses}\n                            error={this.getErrorByFieldname('taskAssignees')}\n                            disabled={isForbiddenErrorOnEdit}\n                            inputProps={{ 'data-testid': 'task-form-assignee-input' }}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormSelectAssigneesLabel} />}\n                            name=\"taskAssignees\"\n                            onBlur={() => this.validateForm('taskAssignees')}\n                            onInput={this.handleApproverSelectorInput}\n                            onRemove={this.handleApproverSelectorRemove}\n                            onSelect={this.handleApproverSelectorSelect}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalAddAssignee)}\n                            selectedOptions={selectedApprovers}\n                            selectorOptions={approverOptions}\n                            shouldSetActiveItemOnOpen\n                            shouldClearUnmatchedInput\n                            validateForError={() => this.validateForm('taskAssignees')}\n                        >\n                            {approverOptions.map(({ id, name, item = {} }) => (\n                                <ContactDatalistItem\n                                    key={id}\n                                    data-testid=\"task-assignee-option\"\n                                    name={name}\n                                    subtitle={\n                                        item.type === 'group' ? (\n                                            <FormattedMessage {...messages.taskCreateGroupLabel} />\n                                        ) : (\n                                            item.email\n                                        )\n                                    }\n                                />\n                            ))}\n                        </PillSelectorDropdown>\n\n                        {shouldShowCompletionRule && (\n                            <>\n                                <FeatureFlag feature=\"activityFeed.tasks.assignToGroup\">\n                                    <Checkbox\n                                        data-testid=\"task-form-completion-rule-checkbox-group\"\n                                        isChecked={isCompletionRuleCheckboxChecked}\n                                        isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                        label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                        tooltip={intl.formatMessage(messages.taskAnyInfoGroupTooltip)}\n                                        name=\"completionRule\"\n                                        onChange={this.handleCompletionRuleChange}\n                                    />\n                                </FeatureFlag>\n                                <FeatureFlag not feature=\"activityFeed.tasks.assignToGroup\">\n                                    <Checkbox\n                                        data-testid=\"task-form-completion-rule-checkbox\"\n                                        isChecked={isCompletionRuleCheckboxChecked}\n                                        isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                        label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                        tooltip={intl.formatMessage(messages.taskAnyInfoTooltip)}\n                                        name=\"completionRule\"\n                                        onChange={this.handleCompletionRuleChange}\n                                    />\n                                </FeatureFlag>\n                            </>\n                        )}\n\n                        <TextArea\n                            className=\"bcs-task-name-input\"\n                            data-testid=\"task-form-name-input\"\n                            disabled={isDisabled || isForbiddenErrorOnEdit}\n                            error={this.getErrorByFieldname('taskName')}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormMessageLabel} />}\n                            name=\"taskName\"\n                            onBlur={() => this.validateForm('taskName')}\n                            onChange={this.handleChangeMessage}\n                            placeholder={intl.formatMessage(commentFormMessages.commentWrite)}\n                            value={message}\n                        />\n                        <DatePicker\n                            className=\"bcs-task-add-due-date-input\"\n                            error={this.getErrorByFieldname('taskDueDate')}\n                            inputProps={{\n                                [INTERACTION_TARGET]: ACTIVITY_TARGETS.TASK_DATE_PICKER,\n                                'data-testid': 'task-form-date-input',\n                            }}\n                            isAccessible\n                            isDisabled={isForbiddenErrorOnEdit}\n                            isKeyboardInputAllowed\n                            isRequired={false}\n                            label={<FormattedMessage {...messages.tasksAddTaskFormDueDateLabel} />}\n                            minDate={new Date()}\n                            name=\"taskDueDate\"\n                            onChange={this.handleDueDateChange}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalSelectDate)}\n                            value={dueDate || undefined}\n                        />\n                        <ModalActions>\n                            <Button\n                                className=\"bcs-task-input-cancel-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_CANCEL}\n                                data-testid=\"task-form-cancel-button\"\n                                onClick={this.handleCancelClick}\n                                isDisabled={isLoading}\n                                type=\"button\"\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...messages.tasksAddTaskFormCancelLabel} />\n                            </Button>\n                            <PrimaryButton\n                                className=\"bcs-task-input-submit-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_POST}\n                                data-testid=\"task-form-submit-button\"\n                                isDisabled={isForbiddenErrorOnEdit}\n                                isLoading={isLoading}\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...submitButtonMessage} />\n                            </PrimaryButton>\n                        </ModalActions>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// For testing only\nexport { TaskForm as TaskFormUnwrapped };\nexport type { TaskFormConsumerProps as TaskFormProps };\n\nexport default injectIntl(TaskForm);\n"],"file":"TaskForm.js"}